use std::sync::Arc;
use std::net::IpAddr;
use crate::utils::scan_ports;
use crate::style;

use iced::{button, Align, Button, Column, Element, Sandbox, Text, Row};

#[derive(Clone, Debug)]
pub struct O2IInfo {
    pub local_address: IpAddr,
    pub public_address: IpAddr,
    pub ports: Arc<Vec<u16>>,
}

#[derive(Default)]
pub struct Counter {
    value: i32,
    refresh_button: button::State,
    decrement_button: button::State,
    theme: style::theme,
}

#[derive(Debug, Clone, Copy)]
pub enum Message {
    RefreshPorts
}

impl Sandbox for Counter {
    type Message = Message;

    fn new() -> Self {
        Self::default()
    }

    fn title(&self) -> String {
        String::from("Counter - Iced")
    }

    fn update(&mut self, message: Message) {
        match message {
            Message::RefreshPorts => {
                //self.value += 1;
                println!("Refreshing ports!");
            }
        }
    }

    fn view(&mut self) -> Element<Message> {
        Column::new()
            .padding(20)
            .style(self.theme)
            .align_items(Align::Center)
            .push(
                Row::new().push(
                    Button::new(&mut self.refresh_button, Text::new("Refresh"))
                        .on_press(Message::RefreshPorts),
                ),
            )
            // .push(Text::new(self.value.to_string()).size(50))
            // .push(
            //     Button::new(&mut self.decrement_button, Text::new("Decrement"))
            //         .on_press(Message::DecrementPressed),
            // )
            .into()
    }
}